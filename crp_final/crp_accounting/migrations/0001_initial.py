# Generated by Django 5.2.1 on 2025-06-08 02:54

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('company', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountGroup',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('name', models.CharField(db_index=True, help_text='Name for the account group (e.g., Current Assets). Must be unique within the company.', max_length=150, verbose_name='Group Name')),
                ('description', models.TextField(blank=True, help_text="Optional description of the account group's purpose.", verbose_name='Description')),
                ('company', models.ForeignKey(help_text='The company this record belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('parent_group', models.ForeignKey(blank=True, help_text='Assign parent for hierarchy. Leave blank for top-level group.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sub_groups', to='crp_accounting.accountgroup', verbose_name='Parent Group')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'Account Group',
                'verbose_name_plural': 'Account Groups',
                'ordering': ['name'],
                'unique_together': {('company', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('account_number', models.CharField(db_index=True, help_text='Identifier code for the account. Must be unique within the company.', max_length=50, verbose_name='Account Number/Code')),
                ('account_name', models.CharField(db_index=True, help_text='Human-readable name (e.g., Cash On Hand). Must be unique within the company.', max_length=255, verbose_name='Account Name')),
                ('description', models.TextField(blank=True, help_text="Optional detailed description of the account's purpose.", verbose_name='Description')),
                ('account_type', models.CharField(choices=[('ASSET', 'Asset'), ('LIABILITY', 'Liability'), ('EQUITY', 'Equity'), ('INCOME', 'Income'), ('EXPENSE', 'Expense'), ('COGS', 'Cost of Goods Sold')], db_index=True, help_text='Fundamental accounting classification (Asset, Liability, etc.).', max_length=30, verbose_name='Account Type')),
                ('account_nature', models.CharField(choices=[('DEBIT', 'Debit'), ('CREDIT', 'Credit')], editable=False, help_text='System-inferred nature (Debit/Credit).', max_length=10, verbose_name='Account Nature')),
                ('pl_section', models.CharField(blank=True, choices=[('REVENUE', 'Revenue'), ('OPENING_STOCK_COGS', 'Opening Stock (COGS)'), ('PURCHASES_COGS', 'Purchases (COGS)'), ('FREIGHT_IN_COGS', 'Freight-In (COGS)'), ('PURCHASE_RETURNS_COGS_ADJ', 'Purchase Returns Adj. (COGS)'), ('PURCHASE_DISCOUNTS_COGS_ADJ', 'Purchase Discounts Adj. (COGS)'), ('CLOSING_STOCK_COGS_ADJ', 'Closing Stock Adj. (COGS)'), ('COGS', 'Cost of Goods Sold (Direct/Perpetual)'), ('OPERATING_EXPENSE', 'Operating Expense'), ('DEPR_AMORT', 'Depreciation & Amortization'), ('OTHER_INCOME', 'Other Income'), ('OTHER_EXPENSE', 'Other Expense'), ('TAX_EXPENSE', 'Tax Expense'), ('NONE', 'Not Applicable (Balance Sheet Accounts)')], db_index=True, default='NONE', help_text='Specific section classification for the Profit & Loss statement.', max_length=30, verbose_name='P&L Section')),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('INR', 'Indian Rupee'), ('GBP', 'British Pound'), ('AED', 'UAE Dirham'), ('JPY', 'Japanese Yen'), ('CAD', 'Canadian Dollar'), ('AUD', 'Australian Dollar'), ('CHF', 'Swiss Franc'), ('CNY', 'Chinese Yuan Renminbi'), ('SGD', 'Singapore Dollar'), ('HKD', 'Hong Kong Dollar'), ('NZD', 'New Zealand Dollar'), ('OTHER', 'Other')], help_text="Currency for this account. Defaults to the company's main currency if not specified.", max_length=10, verbose_name='Account Currency')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Inactive accounts cannot be selected for new transactions.', verbose_name='Account is Active')),
                ('allow_direct_posting', models.BooleanField(default=True, help_text='Can journal entries be posted directly to this account? (Usually False for summary/parent accounts).', verbose_name='Allow Direct Posting')),
                ('is_control_account', models.BooleanField(default=False, help_text='True if this account summarizes a subsidiary ledger (e.g., Accounts Receivable controlling customer balances).', verbose_name='Is Control Account')),
                ('control_account_party_type', models.CharField(blank=True, choices=[('CUSTOMER', 'Customer'), ('SUPPLIER', 'Supplier'), ('EMPLOYEE', 'Employee'), ('OTHER', 'Other'), ('BANK', 'Bank'), ('GOVERNMENT', 'Government Agency'), ('INVESTOR', 'Investor/Shareholder'), ('INTERCOMPANY', 'Intercompany')], db_index=True, help_text="If 'Is Control Account' is true, specify which Party Type it controls (e.g., CUSTOMER).", max_length=20, null=True, verbose_name='Control Account Party Type')),
                ('current_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, help_text='Denormalized current balance. Updated by system processes (e.g., daily batch job or triggers).', max_digits=20, verbose_name='Current Balance')),
                ('balance_last_updated', models.DateTimeField(blank=True, editable=False, help_text="Timestamp of the last balance recalculation for 'current_balance'.", null=True, verbose_name='Balance Last Updated')),
                ('company', models.ForeignKey(help_text='The company this record belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
                ('account_group', models.ForeignKey(help_text='The hierarchical group this account belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='accounts', to='crp_accounting.accountgroup', verbose_name='Account Group')),
            ],
            options={
                'verbose_name': 'Account (COA Entry)',
                'verbose_name_plural': 'Accounts (COA Entries)',
                'ordering': ['company__name', 'account_group__name', 'account_number'],
            },
        ),
        migrations.CreateModel(
            name='BillSequence',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('prefix', models.CharField(blank=True, default='BILL-', help_text="Static prefix for generated bill numbers (e.g., 'BILL-', 'SUP-INV-').", max_length=20, verbose_name='Prefix')),
                ('period_format_for_reset', models.CharField(blank=True, help_text="Optional strftime format for period-based reset (e.g., '%Y' for yearly, '%Y%m' for monthly). Leave blank for continuous numbering across all periods for this prefix.", max_length=10, null=True, verbose_name='Period Format for Reset')),
                ('current_period_key', models.CharField(blank=True, db_index=True, editable=False, help_text="Internal: Stores the formatted period string (e.g., '2024' or '202405') if periodic reset is used. This key, along with company and prefix, defines a unique sequence counter.", max_length=20, null=True, verbose_name='Current Period Key')),
                ('padding_digits', models.PositiveSmallIntegerField(default=5, help_text="Total number of digits for the sequential numeric part, including leading zeros (e.g., 5 for '00001'). Minimum 1.", validators=[django.core.validators.MinValueValidator(1)], verbose_name='Padding Digits')),
                ('current_number', models.PositiveIntegerField(default=0, help_text='The last sequential number issued for the current company, prefix, and period_key combination.', verbose_name='Current Number')),
                ('company', models.ForeignKey(help_text='The company this record belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'Vendor Bill Sequence',
                'verbose_name_plural': 'Vendor Bill Sequences',
                'ordering': ['company__name', 'prefix', '-current_period_key'],
            },
        ),
        migrations.CreateModel(
            name='CustomerInvoice',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('invoice_number', models.CharField(blank=True, db_index=True, help_text='Unique invoice number (system or manual).', max_length=50, verbose_name='Invoice Number')),
                ('invoice_date', models.DateField(db_index=True, default=django.utils.timezone.now, verbose_name='Invoice Date')),
                ('due_date', models.DateField(db_index=True, verbose_name='Due Date')),
                ('terms', models.TextField(blank=True, verbose_name='Payment Terms')),
                ('notes_to_customer', models.TextField(blank=True, verbose_name='Notes to Customer')),
                ('internal_notes', models.TextField(blank=True, verbose_name='Internal Notes')),
                ('subtotal_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Subtotal')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Tax Amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Total Amount')),
                ('amount_paid', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Amount Paid')),
                ('amount_due', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Amount Due')),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('INR', 'Indian Rupee'), ('GBP', 'British Pound'), ('AED', 'UAE Dirham'), ('JPY', 'Japanese Yen'), ('CAD', 'Canadian Dollar'), ('AUD', 'Australian Dollar'), ('CHF', 'Swiss Franc'), ('CNY', 'Chinese Yuan Renminbi'), ('SGD', 'Singapore Dollar'), ('HKD', 'Hong Kong Dollar'), ('NZD', 'New Zealand Dollar'), ('OTHER', 'Other')], max_length=10, verbose_name='Currency')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SENT', 'Sent'), ('PARTIALLY_PAID', 'Partially Paid'), ('PAID', 'Paid'), ('VOID', 'Void'), ('CANCELLED', 'Cancelled'), ('OVERDUE', 'Overdue')], db_index=True, default='DRAFT', max_length=20, verbose_name='Invoice Status')),
                ('company', models.ForeignKey(help_text='The company this record belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_invoices', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'Customer Invoice',
                'verbose_name_plural': 'Customer Invoices',
                'ordering': ['company__name', '-invoice_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerPayment',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('payment_date', models.DateField(db_index=True, default=django.utils.timezone.now, verbose_name='Payment Date')),
                ('reference_number', models.CharField(blank=True, db_index=True, max_length=100, verbose_name='Payment Reference')),
                ('amount_received', models.DecimalField(decimal_places=2, max_digits=20, verbose_name='Amount Received')),
                ('amount_applied', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Amount Applied')),
                ('amount_unapplied', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Amount Unapplied')),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('INR', 'Indian Rupee'), ('GBP', 'British Pound'), ('AED', 'UAE Dirham'), ('JPY', 'Japanese Yen'), ('CAD', 'Canadian Dollar'), ('AUD', 'Australian Dollar'), ('CHF', 'Swiss Franc'), ('CNY', 'Chinese Yuan Renminbi'), ('SGD', 'Singapore Dollar'), ('HKD', 'Hong Kong Dollar'), ('NZD', 'New Zealand Dollar'), ('OTHER', 'Other')], max_length=10, verbose_name='Currency')),
                ('payment_method', models.CharField(blank=True, choices=[('BANK_TRANSFER', 'Bank Transfer'), ('CREDIT_CARD', 'Credit Card'), ('CASH', 'Cash'), ('CHECK', 'Check'), ('ONLINE_PAYMENT', 'Online Payment Gateway'), ('OTHER', 'Other')], max_length=30, verbose_name='Payment Method')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PENDING_APPROVAL', 'Pending Approval'), ('APPROVED', 'Approved for Processing'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed / Cleared'), ('FAILED', 'Failed'), ('VOID', 'Void'), ('UNAPPLIED', 'Unapplied'), ('PARTIALLY_APPLIED', 'Partially Applied'), ('APPLIED', 'Applied'), ('PARTIALLY_PAID', 'PARTIALLY PAID')], db_index=True, default='UNAPPLIED', max_length=20, verbose_name='Payment Status')),
                ('bank_account_credited', models.ForeignKey(help_text="Company's bank/cash Asset account.", on_delete=django.db.models.deletion.PROTECT, related_name='customer_payments_deposited', to='crp_accounting.account', verbose_name='Bank Account Credited')),
                ('company', models.ForeignKey(help_text='The company this record belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_customer_payments', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'Customer Payment',
                'verbose_name_plural': 'Customer Payments',
                'ordering': ['company__name', '-payment_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExchangeRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('INR', 'Indian Rupee'), ('GBP', 'British Pound'), ('AED', 'UAE Dirham'), ('JPY', 'Japanese Yen'), ('CAD', 'Canadian Dollar'), ('AUD', 'Australian Dollar'), ('CHF', 'Swiss Franc'), ('CNY', 'Chinese Yuan Renminbi'), ('SGD', 'Singapore Dollar'), ('HKD', 'Hong Kong Dollar'), ('NZD', 'New Zealand Dollar'), ('OTHER', 'Other')], db_index=True, help_text='The currency code to convert from (e.g., USD).', max_length=10, verbose_name='From Currency')),
                ('to_currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('INR', 'Indian Rupee'), ('GBP', 'British Pound'), ('AED', 'UAE Dirham'), ('JPY', 'Japanese Yen'), ('CAD', 'Canadian Dollar'), ('AUD', 'Australian Dollar'), ('CHF', 'Swiss Franc'), ('CNY', 'Chinese Yuan Renminbi'), ('SGD', 'Singapore Dollar'), ('HKD', 'Hong Kong Dollar'), ('NZD', 'New Zealand Dollar'), ('OTHER', 'Other')], db_index=True, help_text='The currency code to convert to (e.g., INR).', max_length=10, verbose_name='To Currency')),
                ('date', models.DateField(db_index=True, help_text='The date this exchange rate is effective from (inclusive).', verbose_name='Effective Date')),
                ('rate', models.DecimalField(decimal_places=10, help_text="1 unit of 'From Currency' = 'Rate' units of 'To Currency'.", max_digits=20, verbose_name='Exchange Rate')),
                ('source', models.CharField(blank=True, help_text='Optional: Source of this exchange rate.', max_length=100, null=True, verbose_name='Rate Source (Optional)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(blank=True, help_text='Leave blank for global rate, or select company for tenant-specific rate.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exchange_rates', to='company.company', verbose_name='Company (Optional)')),
            ],
            options={
                'verbose_name': 'Exchange Rate',
                'verbose_name_plural': 'Exchange Rates',
                'ordering': ['company', 'from_currency', 'to_currency', '-date'],
            },
        ),
        migrations.CreateModel(
            name='FiscalYear',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('name', models.CharField(help_text='Label for the fiscal year (e.g., 2024-2025). Must be unique within the company.', max_length=100, verbose_name='Fiscal Year Name')),
                ('start_date', models.DateField(help_text='Start date of the fiscal year.', verbose_name='Start Date')),
                ('end_date', models.DateField(help_text='End date of the fiscal year.', verbose_name='End Date')),
                ('is_active', models.BooleanField(db_index=True, default=False, help_text='Designates if this is the currently active fiscal year for the company. Only one can be active per company.', verbose_name='Is Active')),
                ('status', models.CharField(choices=[('Open', 'Open'), ('Locked', 'Locked'), ('Closed', 'Closed')], default='Open', help_text='Operational status of the fiscal year.', max_length=20, verbose_name='Status')),
                ('closed_at', models.DateTimeField(blank=True, help_text='Timestamp when the fiscal year was closed.', null=True, verbose_name='Closed At')),
                ('closed_by', models.ForeignKey(blank=True, help_text='User who closed the year.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='closed_fiscal_years', to=settings.AUTH_USER_MODEL, verbose_name='Closed By')),
                ('company', models.ForeignKey(help_text='The company this record belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'Fiscal Year',
                'verbose_name_plural': 'Fiscal Years',
                'ordering': ['company__name', '-start_date'],
            },
        ),
        migrations.CreateModel(
            name='AccountingPeriod',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('name', models.CharField(help_text='Descriptive name for the period (e.g., January 2024, Q1 2024). Optional, can be auto-generated.', max_length=100, verbose_name='Period Name')),
                ('start_date', models.DateField(help_text='The start date of the accounting period.', verbose_name='Start Date')),
                ('end_date', models.DateField(help_text='The end date of the accounting period.', verbose_name='End Date')),
                ('locked', models.BooleanField(db_index=True, default=False, help_text='Indicates whether the period is locked and no more entries are allowed.', verbose_name='Is Locked')),
                ('company', models.ForeignKey(help_text='The company this record belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
                ('fiscal_year', models.ForeignKey(help_text='The fiscal year to which this period belongs (must be from the same company).', on_delete=django.db.models.deletion.CASCADE, related_name='periods', to='crp_accounting.fiscalyear', verbose_name='Fiscal Year')),
            ],
            options={
                'verbose_name': 'Accounting Period',
                'verbose_name_plural': 'Accounting Periods',
                'ordering': ['fiscal_year__company__name', 'fiscal_year__start_date', 'start_date'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalAccount',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('account_number', models.CharField(db_index=True, help_text='Identifier code for the account. Must be unique within the company.', max_length=50, verbose_name='Account Number/Code')),
                ('account_name', models.CharField(db_index=True, help_text='Human-readable name (e.g., Cash On Hand). Must be unique within the company.', max_length=255, verbose_name='Account Name')),
                ('description', models.TextField(blank=True, help_text="Optional detailed description of the account's purpose.", verbose_name='Description')),
                ('account_type', models.CharField(choices=[('ASSET', 'Asset'), ('LIABILITY', 'Liability'), ('EQUITY', 'Equity'), ('INCOME', 'Income'), ('EXPENSE', 'Expense'), ('COGS', 'Cost of Goods Sold')], db_index=True, help_text='Fundamental accounting classification (Asset, Liability, etc.).', max_length=30, verbose_name='Account Type')),
                ('account_nature', models.CharField(choices=[('DEBIT', 'Debit'), ('CREDIT', 'Credit')], editable=False, help_text='System-inferred nature (Debit/Credit).', max_length=10, verbose_name='Account Nature')),
                ('pl_section', models.CharField(blank=True, choices=[('REVENUE', 'Revenue'), ('OPENING_STOCK_COGS', 'Opening Stock (COGS)'), ('PURCHASES_COGS', 'Purchases (COGS)'), ('FREIGHT_IN_COGS', 'Freight-In (COGS)'), ('PURCHASE_RETURNS_COGS_ADJ', 'Purchase Returns Adj. (COGS)'), ('PURCHASE_DISCOUNTS_COGS_ADJ', 'Purchase Discounts Adj. (COGS)'), ('CLOSING_STOCK_COGS_ADJ', 'Closing Stock Adj. (COGS)'), ('COGS', 'Cost of Goods Sold (Direct/Perpetual)'), ('OPERATING_EXPENSE', 'Operating Expense'), ('DEPR_AMORT', 'Depreciation & Amortization'), ('OTHER_INCOME', 'Other Income'), ('OTHER_EXPENSE', 'Other Expense'), ('TAX_EXPENSE', 'Tax Expense'), ('NONE', 'Not Applicable (Balance Sheet Accounts)')], db_index=True, default='NONE', help_text='Specific section classification for the Profit & Loss statement.', max_length=30, verbose_name='P&L Section')),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('INR', 'Indian Rupee'), ('GBP', 'British Pound'), ('AED', 'UAE Dirham'), ('JPY', 'Japanese Yen'), ('CAD', 'Canadian Dollar'), ('AUD', 'Australian Dollar'), ('CHF', 'Swiss Franc'), ('CNY', 'Chinese Yuan Renminbi'), ('SGD', 'Singapore Dollar'), ('HKD', 'Hong Kong Dollar'), ('NZD', 'New Zealand Dollar'), ('OTHER', 'Other')], help_text="Currency for this account. Defaults to the company's main currency if not specified.", max_length=10, verbose_name='Account Currency')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Inactive accounts cannot be selected for new transactions.', verbose_name='Account is Active')),
                ('allow_direct_posting', models.BooleanField(default=True, help_text='Can journal entries be posted directly to this account? (Usually False for summary/parent accounts).', verbose_name='Allow Direct Posting')),
                ('is_control_account', models.BooleanField(default=False, help_text='True if this account summarizes a subsidiary ledger (e.g., Accounts Receivable controlling customer balances).', verbose_name='Is Control Account')),
                ('control_account_party_type', models.CharField(blank=True, choices=[('CUSTOMER', 'Customer'), ('SUPPLIER', 'Supplier'), ('EMPLOYEE', 'Employee'), ('OTHER', 'Other'), ('BANK', 'Bank'), ('GOVERNMENT', 'Government Agency'), ('INVESTOR', 'Investor/Shareholder'), ('INTERCOMPANY', 'Intercompany')], db_index=True, help_text="If 'Is Control Account' is true, specify which Party Type it controls (e.g., CUSTOMER).", max_length=20, null=True, verbose_name='Control Account Party Type')),
                ('current_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, help_text='Denormalized current balance. Updated by system processes (e.g., daily batch job or triggers).', max_digits=20, verbose_name='Current Balance')),
                ('balance_last_updated', models.DateTimeField(blank=True, editable=False, help_text="Timestamp of the last balance recalculation for 'current_balance'.", null=True, verbose_name='Balance Last Updated')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('account_group', models.ForeignKey(blank=True, db_constraint=False, help_text='The hierarchical group this account belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.accountgroup', verbose_name='Account Group')),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='The company this record belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'historical Account (COA Entry)',
                'verbose_name_plural': 'historical Accounts (COA Entries)',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAccountGroup',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('name', models.CharField(db_index=True, help_text='Name for the account group (e.g., Current Assets). Must be unique within the company.', max_length=150, verbose_name='Group Name')),
                ('description', models.TextField(blank=True, help_text="Optional description of the account group's purpose.", verbose_name='Description')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='The company this record belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('parent_group', models.ForeignKey(blank=True, db_constraint=False, help_text='Assign parent for hierarchy. Leave blank for top-level group.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.accountgroup', verbose_name='Parent Group')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'historical Account Group',
                'verbose_name_plural': 'historical Account Groups',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAccountingPeriod',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('name', models.CharField(help_text='Descriptive name for the period (e.g., January 2024, Q1 2024). Optional, can be auto-generated.', max_length=100, verbose_name='Period Name')),
                ('start_date', models.DateField(help_text='The start date of the accounting period.', verbose_name='Start Date')),
                ('end_date', models.DateField(help_text='The end date of the accounting period.', verbose_name='End Date')),
                ('locked', models.BooleanField(db_index=True, default=False, help_text='Indicates whether the period is locked and no more entries are allowed.', verbose_name='Is Locked')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='The company this record belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('fiscal_year', models.ForeignKey(blank=True, db_constraint=False, help_text='The fiscal year to which this period belongs (must be from the same company).', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.fiscalyear', verbose_name='Fiscal Year')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'historical Accounting Period',
                'verbose_name_plural': 'historical Accounting Periods',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalBillSequence',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('prefix', models.CharField(blank=True, default='BILL-', help_text="Static prefix for generated bill numbers (e.g., 'BILL-', 'SUP-INV-').", max_length=20, verbose_name='Prefix')),
                ('period_format_for_reset', models.CharField(blank=True, help_text="Optional strftime format for period-based reset (e.g., '%Y' for yearly, '%Y%m' for monthly). Leave blank for continuous numbering across all periods for this prefix.", max_length=10, null=True, verbose_name='Period Format for Reset')),
                ('current_period_key', models.CharField(blank=True, db_index=True, editable=False, help_text="Internal: Stores the formatted period string (e.g., '2024' or '202405') if periodic reset is used. This key, along with company and prefix, defines a unique sequence counter.", max_length=20, null=True, verbose_name='Current Period Key')),
                ('padding_digits', models.PositiveSmallIntegerField(default=5, help_text="Total number of digits for the sequential numeric part, including leading zeros (e.g., 5 for '00001'). Minimum 1.", validators=[django.core.validators.MinValueValidator(1)], verbose_name='Padding Digits')),
                ('current_number', models.PositiveIntegerField(default=0, help_text='The last sequential number issued for the current company, prefix, and period_key combination.', verbose_name='Current Number')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='The company this record belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'historical Vendor Bill Sequence',
                'verbose_name_plural': 'historical Vendor Bill Sequences',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalExchangeRate',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('from_currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('INR', 'Indian Rupee'), ('GBP', 'British Pound'), ('AED', 'UAE Dirham'), ('JPY', 'Japanese Yen'), ('CAD', 'Canadian Dollar'), ('AUD', 'Australian Dollar'), ('CHF', 'Swiss Franc'), ('CNY', 'Chinese Yuan Renminbi'), ('SGD', 'Singapore Dollar'), ('HKD', 'Hong Kong Dollar'), ('NZD', 'New Zealand Dollar'), ('OTHER', 'Other')], db_index=True, help_text='The currency code to convert from (e.g., USD).', max_length=10, verbose_name='From Currency')),
                ('to_currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('INR', 'Indian Rupee'), ('GBP', 'British Pound'), ('AED', 'UAE Dirham'), ('JPY', 'Japanese Yen'), ('CAD', 'Canadian Dollar'), ('AUD', 'Australian Dollar'), ('CHF', 'Swiss Franc'), ('CNY', 'Chinese Yuan Renminbi'), ('SGD', 'Singapore Dollar'), ('HKD', 'Hong Kong Dollar'), ('NZD', 'New Zealand Dollar'), ('OTHER', 'Other')], db_index=True, help_text='The currency code to convert to (e.g., INR).', max_length=10, verbose_name='To Currency')),
                ('date', models.DateField(db_index=True, help_text='The date this exchange rate is effective from (inclusive).', verbose_name='Effective Date')),
                ('rate', models.DecimalField(decimal_places=10, help_text="1 unit of 'From Currency' = 'Rate' units of 'To Currency'.", max_digits=20, verbose_name='Exchange Rate')),
                ('source', models.CharField(blank=True, help_text='Optional: Source of this exchange rate.', max_length=100, null=True, verbose_name='Rate Source (Optional)')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='Leave blank for global rate, or select company for tenant-specific rate.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company (Optional)')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Exchange Rate',
                'verbose_name_plural': 'historical Exchange Rates',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalFiscalYear',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('name', models.CharField(help_text='Label for the fiscal year (e.g., 2024-2025). Must be unique within the company.', max_length=100, verbose_name='Fiscal Year Name')),
                ('start_date', models.DateField(help_text='Start date of the fiscal year.', verbose_name='Start Date')),
                ('end_date', models.DateField(help_text='End date of the fiscal year.', verbose_name='End Date')),
                ('is_active', models.BooleanField(db_index=True, default=False, help_text='Designates if this is the currently active fiscal year for the company. Only one can be active per company.', verbose_name='Is Active')),
                ('status', models.CharField(choices=[('Open', 'Open'), ('Locked', 'Locked'), ('Closed', 'Closed')], default='Open', help_text='Operational status of the fiscal year.', max_length=20, verbose_name='Status')),
                ('closed_at', models.DateTimeField(blank=True, help_text='Timestamp when the fiscal year was closed.', null=True, verbose_name='Closed At')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('closed_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who closed the year.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Closed By')),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='The company this record belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'historical Fiscal Year',
                'verbose_name_plural': 'historical Fiscal Years',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalInvoiceLine',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('description', models.TextField(verbose_name='Description/Service')),
                ('quantity', models.DecimalField(decimal_places=2, default=Decimal('1.0'), max_digits=12, verbose_name='Quantity')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=20, verbose_name='Unit Price')),
                ('line_total', models.DecimalField(decimal_places=2, editable=False, max_digits=20, verbose_name='Line Total (Pre-tax)')),
                ('tax_amount_on_line', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=20, verbose_name='Tax on Line')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='The company this record belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('invoice', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.customerinvoice', verbose_name='Invoice')),
                ('revenue_account', models.ForeignKey(blank=True, db_constraint=False, help_text='Income account, same company as invoice.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.account', verbose_name='Revenue Account')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'historical Invoice Line',
                'verbose_name_plural': 'historical Invoice Lines',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalInvoiceSequence',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('prefix', models.CharField(blank=True, default='INV-', max_length=20, verbose_name='Invoice Prefix')),
                ('period_format_for_reset', models.CharField(blank=True, help_text="Strftime format (e.g., '%Y' yearly, '%Y%m' monthly). Blank for continuous.", max_length=10, null=True, verbose_name='Period Format for Reset')),
                ('current_period_key', models.CharField(blank=True, db_index=True, editable=False, max_length=20, null=True, verbose_name='Current Period Key')),
                ('padding_digits', models.PositiveSmallIntegerField(default=5, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Padding Digits')),
                ('last_number', models.PositiveIntegerField(default=0, verbose_name='Last Number Used')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='The company this record belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'historical Invoice Sequence Configuration',
                'verbose_name_plural': 'historical Invoice Sequence Configurations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalParty',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('party_type', models.CharField(choices=[('CUSTOMER', 'Customer'), ('SUPPLIER', 'Supplier'), ('EMPLOYEE', 'Employee'), ('OTHER', 'Other'), ('BANK', 'Bank'), ('GOVERNMENT', 'Government Agency'), ('INVESTOR', 'Investor/Shareholder'), ('INTERCOMPANY', 'Intercompany')], db_index=True, help_text='Classifies the party (e.g., Customer, Supplier).', max_length=20, verbose_name='Party Type')),
                ('name', models.CharField(db_index=True, help_text='Name of the party.', max_length=255, verbose_name='Party Name')),
                ('contact_email', models.EmailField(blank=True, help_text='Primary contact email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator()], verbose_name='Contact Email')),
                ('contact_phone', models.CharField(blank=True, help_text='Primary contact phone number.', max_length=20, null=True, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,19}$', message='Enter a valid phone number (e.g., +12125552368).')], verbose_name='Contact Phone')),
                ('address', models.TextField(blank=True, help_text='Full postal address.', null=True, verbose_name='Address')),
                ('credit_limit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='For Customers: Maximum credit amount extended to them. For Suppliers: An internal threshold for the maximum amount owed to them. 0 means no limit is applied.', max_digits=15, verbose_name='Credit Limit')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Inactive parties cannot be used in new transactions.', verbose_name='Is Active')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='The company this record belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company')),
                ('control_account', models.ForeignKey(blank=True, db_constraint=False, help_text="The COA Account summarizing this party's balance (must belong to the same company).", null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.account', verbose_name='Control Account')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'historical Party',
                'verbose_name_plural': 'historical Parties',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPaymentAllocation',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('amount_applied', models.DecimalField(decimal_places=2, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0.005'))], verbose_name='Amount Applied')),
                ('allocation_date', models.DateField(default=django.utils.timezone.now, verbose_name='Allocation Date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='The company this record belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('invoice', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.customerinvoice', verbose_name='Invoice')),
                ('payment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.customerpayment', verbose_name='Payment')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'historical Payment Allocation',
                'verbose_name_plural': 'historical Payment Allocations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPaymentSequence',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('prefix', models.CharField(default='VPAY-', max_length=20, verbose_name='Prefix')),
                ('period_format_for_reset', models.CharField(blank=True, help_text="Strftime format (e.g., '%Y'). Blank for continuous.", max_length=10, null=True, verbose_name='Period Format for Reset')),
                ('current_period_key', models.CharField(blank=True, db_index=True, editable=False, max_length=20, null=True, verbose_name='Current Period Key')),
                ('padding_digits', models.PositiveSmallIntegerField(default=5, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Padding Digits')),
                ('current_number', models.PositiveIntegerField(default=0, verbose_name='Current Number')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='The company this record belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'historical Vendor Payment Sequence',
                'verbose_name_plural': 'historical Vendor Payment Sequences',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalVoucherSequence',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('voucher_type', models.CharField(choices=[('GENERAL', 'General Voucher'), ('SALES', 'Sales Voucher'), ('PURCHASE', 'Purchase Voucher'), ('RECEIPT', 'Receipt Voucher'), ('PAYMENT', 'Payment Voucher'), ('CONTRA', 'Contra Voucher'), ('DEBIT_NOTE', 'Debit Note'), ('CREDIT_NOTE', 'Credit Note'), ('STOCK_JOURNAL', 'Stock Journal'), ('DEPRECIATION', 'Depreciation'), ('PURCHASE_REVERSAL', 'Purchase Reversal Voucher'), ('PAYMENT_REVERSAL', 'Payment Reversal Voucher')], db_index=True, help_text='The type of voucher this sequence applies to.', max_length=30, verbose_name='Voucher Type')),
                ('prefix', models.CharField(blank=True, help_text="Optional prefix for generated voucher numbers (e.g., 'JV-CO-24Q1-').", max_length=30, verbose_name='Prefix')),
                ('padding_digits', models.PositiveSmallIntegerField(default=4, help_text="Total digits for the numeric part, including leading zeros (e.g., 4 for '0001'). Minimum 1.", validators=[django.core.validators.MinValueValidator(1)], verbose_name='Number Padding Digits')),
                ('last_number', models.PositiveIntegerField(default=0, help_text='The last sequential number issued for this specific sequence configuration.', verbose_name='Last Number Used')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('accounting_period', models.ForeignKey(blank=True, db_constraint=False, help_text='The accounting period this sequence is for (must belong to the same company).', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.accountingperiod', verbose_name='Accounting Period')),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='The company this record belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'historical Voucher Sequence Configuration',
                'verbose_name_plural': 'historical Voucher Sequence Configurations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='InvoiceLine',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('description', models.TextField(verbose_name='Description/Service')),
                ('quantity', models.DecimalField(decimal_places=2, default=Decimal('1.0'), max_digits=12, verbose_name='Quantity')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=20, verbose_name='Unit Price')),
                ('line_total', models.DecimalField(decimal_places=2, editable=False, max_digits=20, verbose_name='Line Total (Pre-tax)')),
                ('tax_amount_on_line', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=20, verbose_name='Tax on Line')),
                ('company', models.ForeignKey(help_text='The company this record belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='crp_accounting.customerinvoice', verbose_name='Invoice')),
                ('revenue_account', models.ForeignKey(help_text='Income account, same company as invoice.', on_delete=django.db.models.deletion.PROTECT, related_name='invoice_lines_revenue', to='crp_accounting.account', verbose_name='Revenue Account')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'Invoice Line',
                'verbose_name_plural': 'Invoice Lines',
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceSequence',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('prefix', models.CharField(blank=True, default='INV-', max_length=20, verbose_name='Invoice Prefix')),
                ('period_format_for_reset', models.CharField(blank=True, help_text="Strftime format (e.g., '%Y' yearly, '%Y%m' monthly). Blank for continuous.", max_length=10, null=True, verbose_name='Period Format for Reset')),
                ('current_period_key', models.CharField(blank=True, db_index=True, editable=False, max_length=20, null=True, verbose_name='Current Period Key')),
                ('padding_digits', models.PositiveSmallIntegerField(default=5, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Padding Digits')),
                ('last_number', models.PositiveIntegerField(default=0, verbose_name='Last Number Used')),
                ('company', models.ForeignKey(help_text='The company this record belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'Invoice Sequence Configuration',
                'verbose_name_plural': 'Invoice Sequence Configurations',
                'ordering': ['company__name', 'prefix', '-current_period_key'],
            },
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('party_type', models.CharField(choices=[('CUSTOMER', 'Customer'), ('SUPPLIER', 'Supplier'), ('EMPLOYEE', 'Employee'), ('OTHER', 'Other'), ('BANK', 'Bank'), ('GOVERNMENT', 'Government Agency'), ('INVESTOR', 'Investor/Shareholder'), ('INTERCOMPANY', 'Intercompany')], db_index=True, help_text='Classifies the party (e.g., Customer, Supplier).', max_length=20, verbose_name='Party Type')),
                ('name', models.CharField(db_index=True, help_text='Name of the party.', max_length=255, verbose_name='Party Name')),
                ('contact_email', models.EmailField(blank=True, help_text='Primary contact email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator()], verbose_name='Contact Email')),
                ('contact_phone', models.CharField(blank=True, help_text='Primary contact phone number.', max_length=20, null=True, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,19}$', message='Enter a valid phone number (e.g., +12125552368).')], verbose_name='Contact Phone')),
                ('address', models.TextField(blank=True, help_text='Full postal address.', null=True, verbose_name='Address')),
                ('credit_limit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='For Customers: Maximum credit amount extended to them. For Suppliers: An internal threshold for the maximum amount owed to them. 0 means no limit is applied.', max_digits=15, verbose_name='Credit Limit')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Inactive parties cannot be used in new transactions.', verbose_name='Is Active')),
                ('company', models.ForeignKey(help_text='The company this record belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', to='company.company', verbose_name='Company')),
                ('control_account', models.ForeignKey(blank=True, help_text="The COA Account summarizing this party's balance (must belong to the same company).", null=True, on_delete=django.db.models.deletion.PROTECT, related_name='controlled_parties', to='crp_accounting.account', verbose_name='Control Account')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'Party',
                'verbose_name_plural': 'Parties',
                'ordering': ['company__name', 'name'],
            },
        ),
        migrations.AddField(
            model_name='customerpayment',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payments_received', to='crp_accounting.party', verbose_name='Customer'),
        ),
        migrations.AddField(
            model_name='customerinvoice',
            name='customer',
            field=models.ForeignKey(help_text='Customer from same company.', on_delete=django.db.models.deletion.PROTECT, related_name='invoices', to='crp_accounting.party', verbose_name='Customer'),
        ),
        migrations.CreateModel(
            name='PaymentAllocation',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('amount_applied', models.DecimalField(decimal_places=2, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0.005'))], verbose_name='Amount Applied')),
                ('allocation_date', models.DateField(default=django.utils.timezone.now, verbose_name='Allocation Date')),
                ('company', models.ForeignKey(help_text='The company this record belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_allocations', to='crp_accounting.customerinvoice', verbose_name='Invoice')),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='crp_accounting.customerpayment', verbose_name='Payment')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'Payment Allocation',
                'verbose_name_plural': 'Payment Allocations',
                'ordering': ['-allocation_date'],
            },
        ),
        migrations.CreateModel(
            name='PaymentSequence',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('prefix', models.CharField(default='VPAY-', max_length=20, verbose_name='Prefix')),
                ('period_format_for_reset', models.CharField(blank=True, help_text="Strftime format (e.g., '%Y'). Blank for continuous.", max_length=10, null=True, verbose_name='Period Format for Reset')),
                ('current_period_key', models.CharField(blank=True, db_index=True, editable=False, max_length=20, null=True, verbose_name='Current Period Key')),
                ('padding_digits', models.PositiveSmallIntegerField(default=5, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Padding Digits')),
                ('current_number', models.PositiveIntegerField(default=0, verbose_name='Current Number')),
                ('company', models.ForeignKey(help_text='The company this record belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'Vendor Payment Sequence',
                'verbose_name_plural': 'Vendor Payment Sequences',
                'ordering': ['company__name', 'prefix', '-current_period_key'],
            },
        ),
        migrations.CreateModel(
            name='VendorBill',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('bill_number', models.CharField(blank=True, db_index=True, help_text='System generated unique bill number.', max_length=50, null=True, verbose_name='Bill Number (System)')),
                ('supplier_bill_reference', models.CharField(blank=True, db_index=True, help_text="Supplier's own invoice/bill number.", max_length=100, null=True, verbose_name='Supplier Bill Reference')),
                ('issue_date', models.DateField(default=django.utils.timezone.now, verbose_name='Issue Date')),
                ('due_date', models.DateField(blank=True, null=True, verbose_name='Due Date')),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('INR', 'Indian Rupee'), ('GBP', 'British Pound'), ('AED', 'UAE Dirham'), ('JPY', 'Japanese Yen'), ('CAD', 'Canadian Dollar'), ('AUD', 'Australian Dollar'), ('CHF', 'Swiss Franc'), ('CNY', 'Chinese Yuan Renminbi'), ('SGD', 'Singapore Dollar'), ('HKD', 'Hong Kong Dollar'), ('NZD', 'New Zealand Dollar'), ('OTHER', 'Other')], max_length=10, verbose_name='Currency')),
                ('subtotal_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Subtotal (Excl. Tax)')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Tax Amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Total Amount (Incl. Tax)')),
                ('amount_paid', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Amount Paid')),
                ('amount_due', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Amount Due')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted for Approval'), ('APPROVED', 'Approved'), ('PARTIALLY_PAID', 'Partially Paid'), ('PAID', 'Paid'), ('VOID', 'Void')], db_index=True, default='DRAFT', max_length=20, verbose_name='Status')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Internal Notes')),
                ('approved_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Approved At')),
                ('approved_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_vendor_bills', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='vendor_bills', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('supplier', models.ForeignKey(limit_choices_to={'party_type': 'SUPPLIER'}, on_delete=django.db.models.deletion.PROTECT, related_name='bills_as_supplier', to='crp_accounting.party', verbose_name='Supplier')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'Vendor Bill',
                'verbose_name_plural': 'Vendor Bills',
                'ordering': ['company', '-issue_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalBillLine',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('description', models.CharField(max_length=255, verbose_name='Description')),
                ('quantity', models.DecimalField(decimal_places=4, default=Decimal('1.0'), max_digits=15, verbose_name='Quantity')),
                ('unit_price', models.DecimalField(decimal_places=4, max_digits=15, verbose_name='Unit Price (Excl. Tax)')),
                ('tax_amount_on_line', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='Tax Amount on Line')),
                ('sequence', models.PositiveIntegerField(default=0, help_text='Controls the display order of lines.', verbose_name='Line Sequence')),
                ('amount', models.DecimalField(decimal_places=2, editable=False, max_digits=15, verbose_name='Line Amount (Excl. Tax)')),
                ('line_total_inclusive_tax', models.DecimalField(decimal_places=2, editable=False, max_digits=15, verbose_name='Line Total (Incl. Tax)')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('expense_account', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.account', verbose_name='Expense/Asset Account')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
                ('vendor_bill', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.vendorbill', verbose_name='Vendor Bill')),
            ],
            options={
                'verbose_name': 'historical Vendor Bill Line',
                'verbose_name_plural': 'historical Vendor Bill Lines',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='BillLine',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('description', models.CharField(max_length=255, verbose_name='Description')),
                ('quantity', models.DecimalField(decimal_places=4, default=Decimal('1.0'), max_digits=15, verbose_name='Quantity')),
                ('unit_price', models.DecimalField(decimal_places=4, max_digits=15, verbose_name='Unit Price (Excl. Tax)')),
                ('tax_amount_on_line', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='Tax Amount on Line')),
                ('sequence', models.PositiveIntegerField(default=0, help_text='Controls the display order of lines.', verbose_name='Line Sequence')),
                ('amount', models.DecimalField(decimal_places=2, editable=False, max_digits=15, verbose_name='Line Amount (Excl. Tax)')),
                ('line_total_inclusive_tax', models.DecimalField(decimal_places=2, editable=False, max_digits=15, verbose_name='Line Total (Incl. Tax)')),
                ('company', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='bill_lines_direct', to='company.company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('expense_account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='bill_lines_as_expense', to='crp_accounting.account', verbose_name='Expense/Asset Account')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
                ('vendor_bill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='crp_accounting.vendorbill', verbose_name='Vendor Bill')),
            ],
            options={
                'verbose_name': 'Vendor Bill Line',
                'verbose_name_plural': 'Vendor Bill Lines',
                'ordering': ['vendor_bill', 'sequence', 'id'],
            },
        ),
        migrations.CreateModel(
            name='VendorPayment',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('payment_number', models.CharField(blank=True, db_index=True, help_text='System generated or external reference.', max_length=50, null=True, verbose_name='Payment Number')),
                ('payment_date', models.DateField(default=django.utils.timezone.now, verbose_name='Payment Date')),
                ('payment_method', models.CharField(blank=True, choices=[('BANK_TRANSFER', 'Bank Transfer'), ('CHECK', 'Check'), ('CREDIT_CARD', 'Credit Card (Company)'), ('CASH', 'Cash'), ('OTHER', 'Other')], max_length=30, null=True, verbose_name='Payment Method')),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('INR', 'Indian Rupee'), ('GBP', 'British Pound'), ('AED', 'UAE Dirham'), ('JPY', 'Japanese Yen'), ('CAD', 'Canadian Dollar'), ('AUD', 'Australian Dollar'), ('CHF', 'Swiss Franc'), ('CNY', 'Chinese Yuan Renminbi'), ('SGD', 'Singapore Dollar'), ('HKD', 'Hong Kong Dollar'), ('NZD', 'New Zealand Dollar'), ('OTHER', 'Other')], max_length=10, verbose_name='Currency')),
                ('payment_amount', models.DecimalField(decimal_places=2, max_digits=20, verbose_name='Payment Amount')),
                ('allocated_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Allocated Amount')),
                ('unallocated_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Unallocated Amount')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PENDING_APPROVAL', 'Pending Approval'), ('APPROVED_PAYMENT', 'Approved for Payment'), ('PAID_COMPLETED', 'Paid / Completed'), ('VOID', 'Void')], db_index=True, default='DRAFT', max_length=20, verbose_name='Status')),
                ('reference_details', models.CharField(blank=True, max_length=100, null=True, verbose_name='Payment Reference (e.g., Check #)')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Internal Notes')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='vendor_payments', to='company.company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('payment_account', models.ForeignKey(limit_choices_to=models.Q(('account_type', 'ASSET')), on_delete=django.db.models.deletion.PROTECT, related_name='payments_made_from_account', to='crp_accounting.account', verbose_name='Paid From Account (Bank/Cash)')),
                ('supplier', models.ForeignKey(limit_choices_to={'party_type': 'SUPPLIER'}, on_delete=django.db.models.deletion.PROTECT, related_name='payments_made_to_supplier', to='crp_accounting.party')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'Vendor Payment',
                'verbose_name_plural': 'Vendor Payments',
                'ordering': ['company', '-payment_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalVendorPaymentAllocation',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('allocated_amount', models.DecimalField(decimal_places=2, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0.005'))], verbose_name='Allocated Amount')),
                ('allocation_date', models.DateField(default=django.utils.timezone.now, verbose_name='Allocation Date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='The company this record belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
                ('vendor_bill', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.vendorbill', verbose_name='Vendor Bill')),
                ('vendor_payment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.vendorpayment', verbose_name='Vendor Payment')),
            ],
            options={
                'verbose_name': 'historical Vendor Payment Allocation',
                'verbose_name_plural': 'historical Vendor Payment Allocations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='VendorPaymentAllocation',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('allocated_amount', models.DecimalField(decimal_places=2, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0.005'))], verbose_name='Allocated Amount')),
                ('allocation_date', models.DateField(default=django.utils.timezone.now, verbose_name='Allocation Date')),
                ('company', models.ForeignKey(help_text='The company this record belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
                ('vendor_bill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_allocations', to='crp_accounting.vendorbill', verbose_name='Vendor Bill')),
                ('vendor_payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bill_allocations', to='crp_accounting.vendorpayment', verbose_name='Vendor Payment')),
            ],
            options={
                'verbose_name': 'Vendor Payment Allocation',
                'verbose_name_plural': 'Vendor Payment Allocations',
                'ordering': ['-allocation_date'],
            },
        ),
        migrations.CreateModel(
            name='Voucher',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('date', models.DateField(db_index=True, default=django.utils.timezone.now, verbose_name='Transaction Date')),
                ('effective_date', models.DateField(blank=True, db_index=True, help_text='Defaults to transaction date.', null=True, verbose_name='Effective Date')),
                ('voucher_number', models.CharField(blank=True, db_index=True, editable=False, max_length=50, null=True, verbose_name='Voucher Number')),
                ('reference', models.CharField(blank=True, max_length=100, null=True, verbose_name='Reference')),
                ('narration', models.TextField(verbose_name='Narration')),
                ('voucher_type', models.CharField(choices=[('GENERAL', 'General Voucher'), ('SALES', 'Sales Voucher'), ('PURCHASE', 'Purchase Voucher'), ('RECEIPT', 'Receipt Voucher'), ('PAYMENT', 'Payment Voucher'), ('CONTRA', 'Contra Voucher'), ('DEBIT_NOTE', 'Debit Note'), ('CREDIT_NOTE', 'Credit Note'), ('STOCK_JOURNAL', 'Stock Journal'), ('DEPRECIATION', 'Depreciation'), ('PURCHASE_REVERSAL', 'Purchase Reversal Voucher'), ('PAYMENT_REVERSAL', 'Payment Reversal Voucher')], db_index=True, default='GENERAL', max_length=30, verbose_name='Voucher Type')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PENDING_APPROVAL', 'Pending Approval'), ('POSTED', 'Posted'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled')], db_index=True, default='DRAFT', max_length=20, verbose_name='Status')),
                ('approved_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Approved At')),
                ('posted_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Posted At')),
                ('is_reversed', models.BooleanField(db_index=True, default=False, editable=False, verbose_name='Is Reversed')),
                ('balances_updated', models.BooleanField(db_index=True, default=False, editable=False, help_text='Internal flag for task idempotency.', verbose_name='Balances Updated Flag')),
                ('accounting_period', models.ForeignKey(help_text='Must belong to the same company.', on_delete=django.db.models.deletion.PROTECT, related_name='vouchers', to='crp_accounting.accountingperiod', verbose_name='Accounting Period')),
                ('approved_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_vouchers', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('company', models.ForeignKey(help_text='The company this record belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_vouchers', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('is_reversal_for', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reversed_by_voucher', to='crp_accounting.voucher', verbose_name='Is Reversal For')),
                ('party', models.ForeignKey(blank=True, help_text='Must belong to the same company.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vouchers', to='crp_accounting.party', verbose_name='Party')),
                ('posted_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posted_vouchers', to=settings.AUTH_USER_MODEL, verbose_name='Posted By')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_vouchers', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'Voucher',
                'verbose_name_plural': 'Vouchers',
                'ordering': ['company__name', '-date', '-created_at'],
                'permissions': [('submit_voucher', 'Can submit voucher'), ('approve_voucher', 'Can approve voucher'), ('reject_voucher', 'Can reject voucher'), ('post_voucher', 'Can post voucher'), ('create_reversal_voucher', 'Can create reversal voucher'), ('delete_draft_voucher', 'Can delete draft voucher'), ('view_all_company_vouchers', 'Can view all company vouchers')],
            },
        ),
        migrations.AddField(
            model_name='vendorpayment',
            name='related_gl_voucher',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_vendor_payment', to='crp_accounting.voucher'),
        ),
        migrations.AddField(
            model_name='vendorbill',
            name='related_gl_voucher',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_vendor_bill', to='crp_accounting.voucher', verbose_name='Related GL Voucher'),
        ),
        migrations.CreateModel(
            name='HistoricalVoucherApproval',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('action_timestamp', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Action Timestamp')),
                ('action_type', models.CharField(choices=[('SUBMITTED', 'Submitted'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled'), ('COMMENTED', 'Commented'), ('REASSIGNED', 'Reassigned'), ('FORWARDED', 'Forwarded'), ('EDITED', 'Edited')], db_index=True, max_length=20, verbose_name='Action Type')),
                ('from_status', models.CharField(blank=True, choices=[('DRAFT', 'Draft'), ('PENDING_APPROVAL', 'Pending Approval'), ('POSTED', 'Posted'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled')], max_length=20, null=True, verbose_name='From Status')),
                ('to_status', models.CharField(blank=True, choices=[('DRAFT', 'Draft'), ('PENDING_APPROVAL', 'Pending Approval'), ('POSTED', 'Posted'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled')], max_length=20, null=True, verbose_name='To Status')),
                ('comments', models.TextField(blank=True, verbose_name='Comments')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='The company this record belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('voucher', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.voucher', verbose_name='Voucher')),
            ],
            options={
                'verbose_name': 'historical Voucher Approval Log',
                'verbose_name_plural': 'historical Voucher Approval Logs',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalVoucher',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('date', models.DateField(db_index=True, default=django.utils.timezone.now, verbose_name='Transaction Date')),
                ('effective_date', models.DateField(blank=True, db_index=True, help_text='Defaults to transaction date.', null=True, verbose_name='Effective Date')),
                ('voucher_number', models.CharField(blank=True, db_index=True, editable=False, max_length=50, null=True, verbose_name='Voucher Number')),
                ('reference', models.CharField(blank=True, max_length=100, null=True, verbose_name='Reference')),
                ('narration', models.TextField(verbose_name='Narration')),
                ('voucher_type', models.CharField(choices=[('GENERAL', 'General Voucher'), ('SALES', 'Sales Voucher'), ('PURCHASE', 'Purchase Voucher'), ('RECEIPT', 'Receipt Voucher'), ('PAYMENT', 'Payment Voucher'), ('CONTRA', 'Contra Voucher'), ('DEBIT_NOTE', 'Debit Note'), ('CREDIT_NOTE', 'Credit Note'), ('STOCK_JOURNAL', 'Stock Journal'), ('DEPRECIATION', 'Depreciation'), ('PURCHASE_REVERSAL', 'Purchase Reversal Voucher'), ('PAYMENT_REVERSAL', 'Payment Reversal Voucher')], db_index=True, default='GENERAL', max_length=30, verbose_name='Voucher Type')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PENDING_APPROVAL', 'Pending Approval'), ('POSTED', 'Posted'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled')], db_index=True, default='DRAFT', max_length=20, verbose_name='Status')),
                ('approved_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Approved At')),
                ('posted_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Posted At')),
                ('is_reversed', models.BooleanField(db_index=True, default=False, editable=False, verbose_name='Is Reversed')),
                ('balances_updated', models.BooleanField(db_index=True, default=False, editable=False, help_text='Internal flag for task idempotency.', verbose_name='Balances Updated Flag')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('accounting_period', models.ForeignKey(blank=True, db_constraint=False, help_text='Must belong to the same company.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.accountingperiod', verbose_name='Accounting Period')),
                ('approved_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='The company this record belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('posted_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Posted By')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
                ('party', models.ForeignKey(blank=True, db_constraint=False, help_text='Must belong to the same company.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.party', verbose_name='Party')),
                ('is_reversal_for', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.voucher', verbose_name='Is Reversal For')),
            ],
            options={
                'verbose_name': 'historical Voucher',
                'verbose_name_plural': 'historical Vouchers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalVendorPayment',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('payment_number', models.CharField(blank=True, db_index=True, help_text='System generated or external reference.', max_length=50, null=True, verbose_name='Payment Number')),
                ('payment_date', models.DateField(default=django.utils.timezone.now, verbose_name='Payment Date')),
                ('payment_method', models.CharField(blank=True, choices=[('BANK_TRANSFER', 'Bank Transfer'), ('CHECK', 'Check'), ('CREDIT_CARD', 'Credit Card (Company)'), ('CASH', 'Cash'), ('OTHER', 'Other')], max_length=30, null=True, verbose_name='Payment Method')),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('INR', 'Indian Rupee'), ('GBP', 'British Pound'), ('AED', 'UAE Dirham'), ('JPY', 'Japanese Yen'), ('CAD', 'Canadian Dollar'), ('AUD', 'Australian Dollar'), ('CHF', 'Swiss Franc'), ('CNY', 'Chinese Yuan Renminbi'), ('SGD', 'Singapore Dollar'), ('HKD', 'Hong Kong Dollar'), ('NZD', 'New Zealand Dollar'), ('OTHER', 'Other')], max_length=10, verbose_name='Currency')),
                ('payment_amount', models.DecimalField(decimal_places=2, max_digits=20, verbose_name='Payment Amount')),
                ('allocated_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Allocated Amount')),
                ('unallocated_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Unallocated Amount')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PENDING_APPROVAL', 'Pending Approval'), ('APPROVED_PAYMENT', 'Approved for Payment'), ('PAID_COMPLETED', 'Paid / Completed'), ('VOID', 'Void')], db_index=True, default='DRAFT', max_length=20, verbose_name='Status')),
                ('reference_details', models.CharField(blank=True, max_length=100, null=True, verbose_name='Payment Reference (e.g., Check #)')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Internal Notes')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('payment_account', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to=models.Q(('account_type', 'ASSET')), null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.account', verbose_name='Paid From Account (Bank/Cash)')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
                ('supplier', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'party_type': 'SUPPLIER'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.party')),
                ('related_gl_voucher', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.voucher')),
            ],
            options={
                'verbose_name': 'historical Vendor Payment',
                'verbose_name_plural': 'historical Vendor Payments',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalVendorBill',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('bill_number', models.CharField(blank=True, db_index=True, help_text='System generated unique bill number.', max_length=50, null=True, verbose_name='Bill Number (System)')),
                ('supplier_bill_reference', models.CharField(blank=True, db_index=True, help_text="Supplier's own invoice/bill number.", max_length=100, null=True, verbose_name='Supplier Bill Reference')),
                ('issue_date', models.DateField(default=django.utils.timezone.now, verbose_name='Issue Date')),
                ('due_date', models.DateField(blank=True, null=True, verbose_name='Due Date')),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('INR', 'Indian Rupee'), ('GBP', 'British Pound'), ('AED', 'UAE Dirham'), ('JPY', 'Japanese Yen'), ('CAD', 'Canadian Dollar'), ('AUD', 'Australian Dollar'), ('CHF', 'Swiss Franc'), ('CNY', 'Chinese Yuan Renminbi'), ('SGD', 'Singapore Dollar'), ('HKD', 'Hong Kong Dollar'), ('NZD', 'New Zealand Dollar'), ('OTHER', 'Other')], max_length=10, verbose_name='Currency')),
                ('subtotal_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Subtotal (Excl. Tax)')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Tax Amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Total Amount (Incl. Tax)')),
                ('amount_paid', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Amount Paid')),
                ('amount_due', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Amount Due')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted for Approval'), ('APPROVED', 'Approved'), ('PARTIALLY_PAID', 'Partially Paid'), ('PAID', 'Paid'), ('VOID', 'Void')], db_index=True, default='DRAFT', max_length=20, verbose_name='Status')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Internal Notes')),
                ('approved_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Approved At')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('approved_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
                ('supplier', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'party_type': 'SUPPLIER'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.party', verbose_name='Supplier')),
                ('related_gl_voucher', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.voucher', verbose_name='Related GL Voucher')),
            ],
            options={
                'verbose_name': 'historical Vendor Bill',
                'verbose_name_plural': 'historical Vendor Bills',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCustomerPayment',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('payment_date', models.DateField(db_index=True, default=django.utils.timezone.now, verbose_name='Payment Date')),
                ('reference_number', models.CharField(blank=True, db_index=True, max_length=100, verbose_name='Payment Reference')),
                ('amount_received', models.DecimalField(decimal_places=2, max_digits=20, verbose_name='Amount Received')),
                ('amount_applied', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Amount Applied')),
                ('amount_unapplied', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Amount Unapplied')),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('INR', 'Indian Rupee'), ('GBP', 'British Pound'), ('AED', 'UAE Dirham'), ('JPY', 'Japanese Yen'), ('CAD', 'Canadian Dollar'), ('AUD', 'Australian Dollar'), ('CHF', 'Swiss Franc'), ('CNY', 'Chinese Yuan Renminbi'), ('SGD', 'Singapore Dollar'), ('HKD', 'Hong Kong Dollar'), ('NZD', 'New Zealand Dollar'), ('OTHER', 'Other')], max_length=10, verbose_name='Currency')),
                ('payment_method', models.CharField(blank=True, choices=[('BANK_TRANSFER', 'Bank Transfer'), ('CREDIT_CARD', 'Credit Card'), ('CASH', 'Cash'), ('CHECK', 'Check'), ('ONLINE_PAYMENT', 'Online Payment Gateway'), ('OTHER', 'Other')], max_length=30, verbose_name='Payment Method')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PENDING_APPROVAL', 'Pending Approval'), ('APPROVED', 'Approved for Processing'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed / Cleared'), ('FAILED', 'Failed'), ('VOID', 'Void'), ('UNAPPLIED', 'Unapplied'), ('PARTIALLY_APPLIED', 'Partially Applied'), ('APPLIED', 'Applied'), ('PARTIALLY_PAID', 'PARTIALLY PAID')], db_index=True, default='UNAPPLIED', max_length=20, verbose_name='Payment Status')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('bank_account_credited', models.ForeignKey(blank=True, db_constraint=False, help_text="Company's bank/cash Asset account.", null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.account', verbose_name='Bank Account Credited')),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='The company this record belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
                ('customer', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.party', verbose_name='Customer')),
                ('related_gl_voucher', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.voucher', verbose_name='Related GL Voucher')),
            ],
            options={
                'verbose_name': 'historical Customer Payment',
                'verbose_name_plural': 'historical Customer Payments',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCustomerInvoice',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('invoice_number', models.CharField(blank=True, db_index=True, help_text='Unique invoice number (system or manual).', max_length=50, verbose_name='Invoice Number')),
                ('invoice_date', models.DateField(db_index=True, default=django.utils.timezone.now, verbose_name='Invoice Date')),
                ('due_date', models.DateField(db_index=True, verbose_name='Due Date')),
                ('terms', models.TextField(blank=True, verbose_name='Payment Terms')),
                ('notes_to_customer', models.TextField(blank=True, verbose_name='Notes to Customer')),
                ('internal_notes', models.TextField(blank=True, verbose_name='Internal Notes')),
                ('subtotal_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Subtotal')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Tax Amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Total Amount')),
                ('amount_paid', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Amount Paid')),
                ('amount_due', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=20, verbose_name='Amount Due')),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('INR', 'Indian Rupee'), ('GBP', 'British Pound'), ('AED', 'UAE Dirham'), ('JPY', 'Japanese Yen'), ('CAD', 'Canadian Dollar'), ('AUD', 'Australian Dollar'), ('CHF', 'Swiss Franc'), ('CNY', 'Chinese Yuan Renminbi'), ('SGD', 'Singapore Dollar'), ('HKD', 'Hong Kong Dollar'), ('NZD', 'New Zealand Dollar'), ('OTHER', 'Other')], max_length=10, verbose_name='Currency')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SENT', 'Sent'), ('PARTIALLY_PAID', 'Partially Paid'), ('PAID', 'Paid'), ('VOID', 'Void'), ('CANCELLED', 'Cancelled'), ('OVERDUE', 'Overdue')], db_index=True, default='DRAFT', max_length=20, verbose_name='Invoice Status')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='The company this record belongs to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
                ('customer', models.ForeignKey(blank=True, db_constraint=False, help_text='Customer from same company.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.party', verbose_name='Customer')),
                ('related_gl_voucher', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='crp_accounting.voucher', verbose_name='Related GL Voucher')),
            ],
            options={
                'verbose_name': 'historical Customer Invoice',
                'verbose_name_plural': 'historical Customer Invoices',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='customerpayment',
            name='related_gl_voucher',
            field=models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_customer_payment', to='crp_accounting.voucher', verbose_name='Related GL Voucher'),
        ),
        migrations.AddField(
            model_name='customerinvoice',
            name='related_gl_voucher',
            field=models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_customer_invoice', to='crp_accounting.voucher', verbose_name='Related GL Voucher'),
        ),
        migrations.CreateModel(
            name='VoucherApproval',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('action_timestamp', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Action Timestamp')),
                ('action_type', models.CharField(choices=[('SUBMITTED', 'Submitted'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled'), ('COMMENTED', 'Commented'), ('REASSIGNED', 'Reassigned'), ('FORWARDED', 'Forwarded'), ('EDITED', 'Edited')], db_index=True, max_length=20, verbose_name='Action Type')),
                ('from_status', models.CharField(blank=True, choices=[('DRAFT', 'Draft'), ('PENDING_APPROVAL', 'Pending Approval'), ('POSTED', 'Posted'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled')], max_length=20, null=True, verbose_name='From Status')),
                ('to_status', models.CharField(blank=True, choices=[('DRAFT', 'Draft'), ('PENDING_APPROVAL', 'Pending Approval'), ('POSTED', 'Posted'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled')], max_length=20, null=True, verbose_name='To Status')),
                ('comments', models.TextField(blank=True, verbose_name='Comments')),
                ('company', models.ForeignKey(help_text='The company this record belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='voucher_approval_actions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('voucher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approvals', to='crp_accounting.voucher', verbose_name='Voucher')),
            ],
            options={
                'verbose_name': 'Voucher Approval Log',
                'verbose_name_plural': 'Voucher Approval Logs',
                'ordering': ['company__name', 'voucher__date', '-action_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='VoucherLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dr_cr', models.CharField(choices=[('DEBIT', 'Dr'), ('CREDIT', 'Cr')], max_length=6, verbose_name='Dr/Cr')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0.000001'))], verbose_name='Amount')),
                ('narration', models.TextField(blank=True, verbose_name='Line Narration')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Line Created At')),
                ('account', models.ForeignKey(help_text='Must belong to the same company as the voucher.', on_delete=django.db.models.deletion.PROTECT, related_name='voucher_lines', to='crp_accounting.account', verbose_name='Account')),
                ('voucher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='crp_accounting.voucher', verbose_name='Voucher')),
            ],
            options={
                'verbose_name': 'Voucher Line',
                'verbose_name_plural': 'Voucher Lines',
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='VoucherSequence',
            fields=[
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('voucher_type', models.CharField(choices=[('GENERAL', 'General Voucher'), ('SALES', 'Sales Voucher'), ('PURCHASE', 'Purchase Voucher'), ('RECEIPT', 'Receipt Voucher'), ('PAYMENT', 'Payment Voucher'), ('CONTRA', 'Contra Voucher'), ('DEBIT_NOTE', 'Debit Note'), ('CREDIT_NOTE', 'Credit Note'), ('STOCK_JOURNAL', 'Stock Journal'), ('DEPRECIATION', 'Depreciation'), ('PURCHASE_REVERSAL', 'Purchase Reversal Voucher'), ('PAYMENT_REVERSAL', 'Payment Reversal Voucher')], db_index=True, help_text='The type of voucher this sequence applies to.', max_length=30, verbose_name='Voucher Type')),
                ('prefix', models.CharField(blank=True, help_text="Optional prefix for generated voucher numbers (e.g., 'JV-CO-24Q1-').", max_length=30, verbose_name='Prefix')),
                ('padding_digits', models.PositiveSmallIntegerField(default=4, help_text="Total digits for the numeric part, including leading zeros (e.g., 4 for '0001'). Minimum 1.", validators=[django.core.validators.MinValueValidator(1)], verbose_name='Number Padding Digits')),
                ('last_number', models.PositiveIntegerField(default=0, help_text='The last sequential number issued for this specific sequence configuration.', verbose_name='Last Number Used')),
                ('accounting_period', models.ForeignKey(help_text='The accounting period this sequence is for (must belong to the same company).', on_delete=django.db.models.deletion.CASCADE, to='crp_accounting.accountingperiod', verbose_name='Accounting Period')),
                ('company', models.ForeignKey(help_text='The company this record belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'Voucher Sequence Configuration',
                'verbose_name_plural': 'Voucher Sequence Configurations',
                'ordering': ['company__name', 'accounting_period__start_date', 'voucher_type'],
            },
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['company', 'account_type'], name='crp_account_company_657cf8_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['company', 'pl_section'], name='crp_account_company_e683bf_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['company', 'is_active', 'allow_direct_posting'], name='crp_account_company_e3098e_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['company', 'is_control_account', 'control_account_party_type'], name='crp_account_company_57ccc2_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['company', 'account_group'], name='crp_account_company_53619c_idx'),
        ),
        migrations.AddConstraint(
            model_name='account',
            constraint=models.CheckConstraint(condition=models.Q(('is_control_account', False), ('control_account_party_type__isnull', False), _connector='OR'), name='coa_check_control_account_requires_party_type', violation_error_message='Control accounts must specify a Control Account Party Type.'),
        ),
        migrations.AddConstraint(
            model_name='account',
            constraint=models.CheckConstraint(condition=models.Q(('is_control_account', True), ('control_account_party_type__isnull', True), _connector='OR'), name='coa_check_party_type_requires_control_account', violation_error_message="Control Account Party Type can only be set if 'Is Control Account' is true."),
        ),
        migrations.AlterUniqueTogether(
            name='account',
            unique_together={('company', 'account_name'), ('company', 'account_number')},
        ),
        migrations.AlterUniqueTogether(
            name='billsequence',
            unique_together={('company', 'prefix', 'current_period_key')},
        ),
        migrations.AlterUniqueTogether(
            name='exchangerate',
            unique_together={('company', 'from_currency', 'to_currency', 'date')},
        ),
        migrations.AddIndex(
            model_name='fiscalyear',
            index=models.Index(fields=['company', 'is_active'], name='crp_account_company_e15f80_idx'),
        ),
        migrations.AddIndex(
            model_name='fiscalyear',
            index=models.Index(fields=['company', 'start_date', 'end_date'], name='crp_account_company_e86853_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='fiscalyear',
            unique_together={('company', 'name')},
        ),
        migrations.AddIndex(
            model_name='accountingperiod',
            index=models.Index(fields=['fiscal_year', 'start_date', 'end_date'], name='crp_account_fiscal__3ed5c6_idx'),
        ),
        migrations.AddIndex(
            model_name='accountingperiod',
            index=models.Index(fields=['fiscal_year', 'locked'], name='crp_account_fiscal__172a4e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='accountingperiod',
            unique_together={('fiscal_year', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='invoicesequence',
            unique_together={('company', 'prefix', 'current_period_key')},
        ),
        migrations.AddIndex(
            model_name='party',
            index=models.Index(fields=['company', 'party_type'], name='crp_account_company_e5ae33_idx'),
        ),
        migrations.AddIndex(
            model_name='party',
            index=models.Index(fields=['company', 'name'], name='crp_account_company_702631_idx'),
        ),
        migrations.AddIndex(
            model_name='party',
            index=models.Index(fields=['company', 'is_active'], name='crp_account_company_27be7e_idx'),
        ),
        migrations.AddIndex(
            model_name='party',
            index=models.Index(fields=['company', 'control_account'], name='crp_account_company_fde14a_idx'),
        ),
        migrations.AddConstraint(
            model_name='party',
            constraint=models.CheckConstraint(condition=models.Q(('credit_limit__gte', Decimal('0.00'))), name='party_credit_limit_non_negative', violation_error_message='Credit limit cannot be negative.'),
        ),
        migrations.AlterUniqueTogether(
            name='party',
            unique_together={('company', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='paymentallocation',
            unique_together={('payment', 'invoice')},
        ),
        migrations.AlterUniqueTogether(
            name='paymentsequence',
            unique_together={('company', 'prefix', 'current_period_key')},
        ),
        migrations.AlterUniqueTogether(
            name='vendorpaymentallocation',
            unique_together={('vendor_payment', 'vendor_bill')},
        ),
        migrations.AddIndex(
            model_name='voucher',
            index=models.Index(fields=['company', 'status', 'accounting_period'], name='vouch_co_stat_period_idx'),
        ),
        migrations.AddIndex(
            model_name='voucher',
            index=models.Index(fields=['company', 'date', 'voucher_type'], name='voucher_co_date_type_idx'),
        ),
        migrations.AddIndex(
            model_name='voucher',
            index=models.Index(fields=['company', 'party'], name='voucher_co_party_idx'),
        ),
        migrations.AddIndex(
            model_name='voucher',
            index=models.Index(condition=models.Q(('is_reversal_for__isnull', False)), fields=['is_reversal_for'], name='voucher_is_reversal_idx'),
        ),
        migrations.AddIndex(
            model_name='voucher',
            index=models.Index(fields=['company', 'is_reversed', 'status'], name='voucher_co_rev_stat_idx'),
        ),
        migrations.AddIndex(
            model_name='voucher',
            index=models.Index(fields=['company', 'balances_updated', 'status'], name='voucher_co_balupd_stat_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='voucher',
            unique_together={('company', 'voucher_number')},
        ),
        migrations.AlterUniqueTogether(
            name='vendorpayment',
            unique_together={('company', 'payment_number')},
        ),
        migrations.AddConstraint(
            model_name='vendorbill',
            constraint=models.CheckConstraint(condition=models.Q(('bill_number__isnull', False), ('status', 'DRAFT'), _connector='OR'), name='non_draft_bill_must_have_number', violation_error_message='Non-draft bills must have a bill number.'),
        ),
        migrations.AlterUniqueTogether(
            name='vendorbill',
            unique_together={('company', 'bill_number'), ('company', 'supplier', 'supplier_bill_reference')},
        ),
        migrations.AddIndex(
            model_name='customerpayment',
            index=models.Index(fields=['company', 'customer', 'payment_date'], name='custpay_co_cust_date_idx'),
        ),
        migrations.AddIndex(
            model_name='customerpayment',
            index=models.Index(fields=['company', 'status'], name='custpay_co_stat_idx'),
        ),
        migrations.AddIndex(
            model_name='customerinvoice',
            index=models.Index(fields=['company', 'customer', 'invoice_date'], name='custinv_co_cust_date_idx'),
        ),
        migrations.AddIndex(
            model_name='customerinvoice',
            index=models.Index(fields=['company', 'status', 'due_date'], name='custinv_co_stat_due_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='customerinvoice',
            unique_together={('company', 'invoice_number')},
        ),
        migrations.AddIndex(
            model_name='voucherapproval',
            index=models.Index(fields=['company', 'voucher', 'action_timestamp'], name='vouchappr_co_vch_ts_idx'),
        ),
        migrations.AddIndex(
            model_name='voucherapproval',
            index=models.Index(fields=['company', 'user', 'action_timestamp'], name='vouchappr_co_user_ts_idx'),
        ),
        migrations.AddIndex(
            model_name='voucherline',
            index=models.Index(fields=['voucher', 'account'], name='vouchline_vouch_acct_idx'),
        ),
        migrations.AddIndex(
            model_name='voucherline',
            index=models.Index(fields=['voucher', 'dr_cr'], name='vouchline_vouch_drcr_idx'),
        ),
        migrations.AddIndex(
            model_name='voucherline',
            index=models.Index(fields=['account', 'voucher'], name='vouchline_acct_vouch_id_idx'),
        ),
        migrations.AddIndex(
            model_name='vouchersequence',
            index=models.Index(fields=['company', 'voucher_type', 'accounting_period'], name='vouchseq_co_type_period_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='vouchersequence',
            unique_together={('company', 'voucher_type', 'accounting_period')},
        ),
    ]
