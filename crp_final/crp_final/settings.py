"""
Django settings for crp_final project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv # <<< ADD THIS
import dj_database_url
from decouple import config
import os

from django.conf import settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv()
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
BASE_DOMAIN = os.getenv('BASE_DOMAIN', None)
# SECURITY WARNING: don't run with debug turned on in production!
SECRET_KEY = config("SECRET_KEY")
DEBUG = config("DEBUG", default=False, cast=bool)
ALLOWED_HOSTS = [
    'leadstocompany-crp.onrender.com',  # Add your Render domain here
    '127.0.0.1',
    'localhost',
    '150.242.202.207', 'charanbhim.duckdns.org',
]
if BASE_DOMAIN and BASE_DOMAIN != 'localhost':
     ALLOWED_HOSTS.append(f'.{BASE_DOMAIN}') # e.g., '.example.com'
     ALLOWED_HOSTS.append(BASE_DOMAIN)      # e.g., 'example.com'

# Load other settings used by middleware if needed
NON_TENANT_SUBDOMAINS = os.getenv('NON_TENANT_SUBDOMAINS', 'www').split(',') # Example: NON_TENANT_SUBDOMAINS=www,api
MISSING_COMPANY_BEHAVIOR = os.getenv('MISSING_COMPANY_BEHAVIOR', 'raise_404')
MISSING_COMPANY_REDIRECT_URL_NAME = os.getenv('MISSING_COMPANY_REDIRECT_URL_NAME', None)

# Application definition

INSTALLED_APPS = [
    # 1. Third-party apps that modify admin (like Jazzmin)
    'jazzmin',

    # 2. Your custom apps (especially those overriding admin templates)
    'accounts',
    'crp_accounting.apps.CrpAccountingConfig', # Example if crp_accounting also has signals/AppConfig
    'crp_core.apps.CrpCoreConfig',             # Example if crp_core also has signals/AppConfig
    'corsheaders',
    'rest_framework',
    'drf_spectacular',
    'company.apps.CompanyConfig', # <--- THIS IS THE CRUCIAL CHANGE
    'safedelete',
    'mathfilters',

    # 3. Default Django apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',

    'company.middleware.CompanyMiddleware', # Identifies request.company

    # --- Add Django-CRUM Middleware HERE ---
    'crum.CurrentRequestUserMiddleware',
    # ---------------------------------------

    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'crp_final.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
         'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crp_final.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


AUTH_USER_MODEL = 'accounts.User'

# (Optional) JWT Token lifetime (customize as needed)
from datetime import timedelta
# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=200),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

}

CELERY_TASK_ALWAYS_EAGER = True

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = config('EMAIL_HOST')
# EMAIL_PORT = config('EMAIL_PORT', cast=int)
# EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)
# EMAIL_HOST_USER = config('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
# DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')
#
# RAZORPAY_KEY_ID = os.getenv("RAZORPAY_KEY_ID")
# RAZORPAY_KEY_SECRET = os.getenv("RAZORPAY_KEY_SECRET")

SPECTACULAR_SETTINGS = {
    'TITLE': 'CRP API',
    'DESCRIPTION': 'API documentation with auth support',
    'VERSION': '1.0.0',
    'SERVE_SCHEMA': True,
    'SERVE_INCLUDE_SCHEMA': True,

    'SWAGGER_UI_SETTINGS': {
        'persistAuthorization': True,  # Important for keeping auth between refreshes
    },

    'COMPONENT_SPLIT_REQUEST': True,

    'SECURITY': [
        {'BearerAuth': []}
    ],

    'COMPONENTS': {
        'securitySchemes': {
            'BearerAuth': {
                'type': 'http',
                'scheme': 'bearer',
                'bearerFormat': 'JWT',
            }
        }
    },
}
# broker_url = settings.CELERY_BROKER_URL
# result_backend = settings.CELERY_RESULT_BACKEND
REST_FRAMEWORK = {
    # --- Authentication ---
    # You are using JWTAuthentication, which is good.
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',

        # Add SessionAuthentication if you also use the browsable API login
        # 'rest_framework.authentication.SessionAuthentication',
    ),


    # --- Permissions ---
    # Sets the default permission policy. IsAuthenticated is a sensible default
    # when using token authentication like JWT. Views can override this.
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.IsAuthenticated',
    # ),

    # --- Throttling (Rate Limiting) ---
    # Defines the default throttling mechanism applied to ALL views unless
    # a view explicitly overrides 'throttle_classes'.
    'DEFAULT_THROTTLE_CLASSES': (
        'rest_framework.throttling.UserRateThrottle', # Limits based on authenticated user
        'rest_framework.throttling.AnonRateThrottle', # Limits based on IP for anonymous users
    ),
    # Defines the rates for the default throttle scopes ('user' and 'anon').
    # Adjust these rates based on your expected usage and server capacity.
    'DEFAULT_THROTTLE_RATES': {
        'user': '1000/day',  # Example: 1000 requests per user per day
        'anon': '100/day',   # Example: 100 requests per IP per day
        # Optional: Define rates for custom scopes if used in views
        # 'reports': '60/min', # Example rate for views with throttle_scope = 'reports'
    },

    # --- Schema Generation ---
    # You are using drf-spectacular for OpenAPI/Swagger generation.
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",

    # --- Exception Handling (Recommended) ---
    # Uncomment and point this to your custom handler function once created.
    # This centralizes error response formatting.
    # 'EXCEPTION_HANDLER': 'your_project_core.exceptions.custom_api_exception_handler',

    # --- Other Optional Settings ---
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 25,
    # 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}

# --- Caching ---
# https://docs.djangoproject.com/en/stable/topics/cache/

CACHES = {
    'default': {
        # Using LocMemCache - suitable for development/testing.
        # For production, switch to Redis or Memcached.
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        # LOCATION is just an identifier for LocMemCache, can be any unique string.
        'LOCATION': 'unique-crp-cache-instance', # Changed name slightly for clarity
        # Optional: Set a default timeout for all cache entries (in seconds)
        # 'TIMEOUT': 300, # Example: 5 minutes default
    }
    # --- Example Redis Cache (Production Recommended) ---
    # 'default': {
    #     'BACKEND': 'django_redis.cache.RedisCache',
    #     'LOCATION': 'redis://127.0.0.1:6379/1', # Your Redis server URL (db 1)
    #     'OPTIONS': {
    #         'CLIENT_CLASS': 'django_redis.client.DefaultClient',
    #         # "PASSWORD": "your-redis-password", # If needed
    #     },
    #     # 'TIMEOUT': 300, # Optional: Default timeout for this cache
    # }
}
X_FRAME_OPTIONS = 'SAMEORIGIN'

PASSWORD_RESET_TIMEOUT=900          # 900 Sec = 15 Min

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]


CSRF_TRUSTED_ORIGINS = [
    'https://leadstocompany-crp.onrender.com',
]




STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# settings.py
JAZZMIN_SETTINGS = {
    "site_title": "CRP Admin",
    "site_header": "CRP Accounting",
    "site_brand": "CRP Dashboard",

    "login_logo_dark": None,
    "site_logo_classes": "img-circle",
    "site_icon": None,
    "welcome_sign": "Welcome to CRP Accounting",
    "copyright": "CRP Edge Ltd",

    "search_model": ["accounts.User", "crp_accounting.Party", "crp_accounting.Voucher"],
    "user_avatar": None,

    "topmenu_links": [
        {"name": "Home", "url": "admin:index", "permissions": ["auth.view_user"]},
        {"name": "New Voucher", "url": "admin:crp_accounting_voucher_add", "permissions": ["crp_accounting.add_voucher"]},
        {"model": "accounts.User"},
        {"app": "crp_accounting"},
    ],

    "usermenu_links": [
        {"model": "accounts.User"},
    ],

    "show_sidebar": True,
    "navigation_expanded": False,  # <-- Collapsible sidebar (dropdown)
    "hide_apps": [],
    "hide_models": [],  # You can optionally hide models if using custom_links below
    "order_with_respect_to": [
        "crp_accounting",  # app grouping
        "crp_accounting.Voucher",
        "crp_accounting.Account",
        "crp_accounting.Party",
        "crp_accounting.AccountGroup",
        "crp_accounting.FiscalYear",
        "crp_accounting.AccountingPeriod",
        "crp_accounting.VoucherSequence",
        "crp_accounting.VoucherLine",
        "crp_accounting.VoucherApprovalLog",
        "accounts",
        "accounts.User",
        "auth.Group",
    ],

    "icons": {
        "auth": "fas fa-users-cog",
        "auth.Group": "fas fa-users",
        "accounts": "fas fa-id-card",
        "accounts.User": "fas fa-user-circle",
        "crp_accounting": "fas fa-calculator",
        "crp_accounting.AccountGroup": "fas fa-layer-group",
        "crp_accounting.AccountingPeriod": "far fa-calendar-alt",
        "crp_accounting.Account": "fas fa-university",
        "crp_accounting.FiscalYear": "fas fa-calendar-check",
        "crp_accounting.Party": "fas fa-address-book",
        "crp_accounting.VoucherApprovalLog": "fas fa-clipboard-check",
        "crp_accounting.VoucherLine": "fas fa-list-ol",
        "crp_accounting.VoucherSequence": "fas fa-sort-numeric-down",
        "crp_accounting.Voucher": "fas fa-file-invoice-dollar",
    },

    "default_icon_parents": "fas fa-folder",
    "default_icon_children": "fas fa-file",

    # Optional: group related links under a custom section
    "custom_links": {
        "Accounting Center": [
            {"name": "Vouchers", "url": "admin:crp_accounting_voucher_changelist", "icon": "fas fa-file-invoice-dollar"},
            {"name": "Accounts", "url": "admin:crp_accounting_account_changelist", "icon": "fas fa-university"},
            {"name": "Parties", "url": "admin:crp_accounting_party_changelist", "icon": "fas fa-address-book"},
            {"name": "Fiscal Years", "url": "admin:crp_accounting_fiscalyear_changelist", "icon": "fas fa-calendar-check"},
        ]
    },

    "related_modal_active": True,
    "show_ui_builder": True,  # Set to False in production
    "changeform_format": "horizontal_tabs",
    "changeform_format_overrides": {
        "accounts.User": "collapsible",
        "auth.Group": "vertical_tabs",
    },
}


JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": False,
    "brand_small_text": False,

    "brand_colour": False,
    "accent": "accent-primary",
    "navbar": "navbar-white navbar-light",
    "no_navbar_border": False,

    "navbar_fixed": False,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": True,

    "sidebar": "sidebar-dark-primary",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": False,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,

    "theme": "cosmo",  # Options: "litera", "simplex", "journal", etc.
    "dark_mode_theme": None,  # "darkly", "cyborg", etc.

    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success",
    }
}
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',  # This is the key change
    },
}